<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PCL on LESS IS MORE</title>
    <link>http://r9y9.github.io/tags/pcl/</link>
    <description>Recent content in PCL on LESS IS MORE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Mon, 18 Jan 2016 00:44:46 +0900</lastBuildDate>
    
	<atom:link href="http://r9y9.github.io/tags/pcl/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>対話環境でPoint Cloud Library (PCL) を使いたい</title>
      <link>http://r9y9.github.io/blog/2016/01/18/trying-to-use-pcl-in-dynamic-language/</link>
      <pubDate>Mon, 18 Jan 2016 00:44:46 +0900</pubDate>
      
      <guid>http://r9y9.github.io/blog/2016/01/18/trying-to-use-pcl-in-dynamic-language/</guid>
      <description>新年はじめての記事ということで、少し遅いですが、あけましておめでとうございます。PCLを対話環境で使いたかったので、お正月の間にPCLのラッパーを作りました1。なぜ作ったのか、どうやって作ったのか、少し整理して書いてみようと思います。
Point Cloud Library (PCL) とは http://www.pointclouds.org/
問題 PCL はboost、Eigenに依存している、かつtemplateを多く使用しているため、PCLを使用したプロジェクトのコンパイル時間は非常に長くなるという問題があります。twitterで [PCL コンパイル] として検索すると、例えば以下の様なツイートが見つかりますが、完全に同意です。
 PCLリンクしてるコードのコンパイルに一分半くらいかかる。つらい
&amp;mdash; がらえもん(プログラム書く (@garaemon_coder) August 14, 2015 PCLはC++だしコンパイル遅いしで色々めんどくさい
&amp;mdash; 動かないで点P (@initial_D_0601) August 25, 2015 PCLを使うプロジェクトのコンパイル時間かかりすぎて辛いわ
&amp;mdash; kato tetsuro (@tkato_) November 6, 2015 boostへの依存関係が必須かどうかについては疑問が残りますが、点群処理ではパフォーマンスが求められることが多いと思われるので、C++で書かれていることは合理的に思います。とはいえ、コンパイル時間が長いのは試行錯誤するにはつらいです。
ではどうするか 試行錯誤のサイクルを速く回せるようにすることは僕にとって非常に重要だったのと、 C++で書かなければいけないという制約もなかった（※組み込み用途ではない）ので、対話的にPCLを使うために、僕は動的型付け言語でラッパーを作ることにしました。
参考までに、対話環境を使うことによるメリットは、下記スライドが参考になります。PCLの紹介もされています2。
  コンピュータビジョンの最新ソフトウェア開発環境 SSII2015 チュートリアル hayashi  from Masaki Hayashi   何で書くか 世の中には色んなプログラミング言語があります。C++ライブラリのラッパー作るぞとなったとき、僕にとって選択肢は、
 Python Julia  の二択でした。それぞれ、以下のプロジェクトに頼れば templateを多用したライブラリのラップができそうだと思いました。
 Cython Cxx.jl  pythonに関しては、すでに cythonで書かれた strawlab/python-pcl というラッパーがあります。しかし、</description>
    </item>
    
  </channel>
</rss>