<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Julia on LESS IS MORE</title>
    <link>http://r9y9.github.io/tags/julia/</link>
    <description>Recent content in Julia on LESS IS MORE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Thu, 21 Dec 2017 00:00:00 +0900</lastBuildDate>
    
	<atom:link href="http://r9y9.github.io/tags/julia/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Interactive C&#43;&#43;: Jupyter上で対話的にC&#43;&#43;を使う方法の紹介 [Jupyter Advent Calendar 2017]</title>
      <link>http://r9y9.github.io/blog/2017/12/21/jupyter-cxx/</link>
      <pubDate>Thu, 21 Dec 2017 00:00:00 +0900</pubDate>
      
      <guid>http://r9y9.github.io/blog/2017/12/21/jupyter-cxx/</guid>
      <description>Jupyter Advent Calendar 2017 21日目の記事です。
C++をJupyterで使う方法はいくつかあります。この記事では、僕が試したことのある以下の4つの方法について、比較しつつ紹介したいと思います。
 root/cling 付属のカーネル root/root 付属のカーネル xeus-cling Keno/Cxx.jl をIJuliaで使う  まとめとして、簡単に特徴などを表にまとめておきますので、選ぶ際の参考にしてください。詳細な説明は後に続きます。
    cling ROOT xeus-cling Cxx.jl + IJulia     C++インタプリタ実装 C++ C++ C++ Julia + C++   (Tab) Code completion ○ ○ ○ x   Cインタプリタ △1 △ △ ○   %magics x %%cpp, %%jsroot, その他 x △2   他言語との連携 x Python, R 3 x Julia   バイナリ配布 公式リンク 公式リンク (python2系向け） condaで提供 △4   オンラインデモ x rootdemo binderリンク x    共通事項</description>
    </item>
    
    <item>
      <title>Juliaをソースからビルドする</title>
      <link>http://r9y9.github.io/blog/2016/12/23/julia-advent-calender-2016-customize-source-build/</link>
      <pubDate>Fri, 23 Dec 2016 18:06:08 +0900</pubDate>
      
      <guid>http://r9y9.github.io/blog/2016/12/23/julia-advent-calender-2016-customize-source-build/</guid>
      <description>Julia advent calendar 2016 23日目の記事です。
はじめに Juilaを最も簡単にインストールする方法は、公式のダウンロードページからバイナリ or インストーラを使用することだと思います。多くの人は、処理系をソースからビルドして使用することはめったにないと思いますが1、自分好みにビルドをカスタマイズしてJuliaを使いたいというコアな方向けに、僕がよく使うビルド時のオプションや便利そうなオプション、ビルド時のTipsなどを紹介しようと思います。
僕がソースからビルドすることになった主な理由は、ソースからビルドしないと使えないパッケージがあったからです2。
下準備 git clone https://github.com/JuliaLang/julia &amp;amp;&amp;amp; cd julia ビルドのカスタマイズ方法 Juliaのビルドシステムでは、Make.userというファイルで、ユーザがいくらかカスタマイズすることを許可しています。プロジェクトトップにMake.userを作成し、そこに override LLVM_VER=3.7.1 のような書き方で記述することで、カスタマイズ可能です（詳細は公式の説明をご覧ください）。例えば僕の場合、主な開発環境であるmacOSではMake.userを以下のように記述しています（項目の説明は後ほどします）。
override LLVM_VER=3.7.1 override LLVM_ASSERTIONS=1 override BUILD_LLVM_CLANG=1 override USE_LLVM_SHLIB=1 あとは、通常通りmakeコマンドを走らせることで、ビルドを行います。
make -j4 コア数は適当に指定します。llvm, openblasあたりのビルドが結構重いので、並列ビルドがオススメです。
僕がよく使うオプション ここから、僕がよく使うオプションをいくつか解説します。
LLVM_VER llvmのバージョンを表します。Julia上でC++を使いたいというcrazyな人に激推しの Keno/Cxx.jl というパッケージがあるのですが、このパッケージはclangとllvmの3.7.1以上を必要とします（Cxx.jlについては、過去に何度か記事を書いたので、例えば Cxx.jlを用いてJulia expression/value をC++に埋め込む実験 をご覧ください）。llvm 3.3がデフォルトだったJulia v0.4時代では、明示的に3.7.1と指定する必要がありました。いまは、
 Julia v0.5の公式配布バイナリでも、Pkg.add(&amp;quot;Cxx&amp;quot;)でインストールできるとされている（Keno/Cxx.jl/#287） かつ現状のデフォルトバージョンが3.7.1 (もうすぐ3.9.1になりそうですが JuliaLang/julia/#19768)  なので、僕の場合は明示的にLLVM_VERを指定する必要はなくなってきましたが、例えば、LLVMのNVPTX backendを使ってJuliaでCUDAカーネルを書けるようにする JuliaGPU/CUDAnative.jl （要 llvm 3.9）のような、experimentalなパッケージを試したい場合など、LLVM_VERを指定したくなる場合もあるかと思います。
LLVM_ASSERTIONS LLVMをassert付きでビルドするかどうかを表します。ONにするとビルドかかる時間が長くなり、LLVMのパフォーマンスが若干落ちますが、デバッグには便利です。Juliaのコード生成周りでエラーを起こしやすいようなコードを書くときには、ONにしておくと便利です。
BUILD_LLVM_CLANG llvmとあわせて、clangをビルドするかどうか、というオプションです。Cxx.jlに必要なので、僕はそのためにONにしています。その他必要なケースとしては、clangのaddress/memory sanitizerを使いたい場合が考えられます。詳細はdevdocs/sanitizers をご覧ください。
CC, CXX コンパイラの指定です。僕の場合 ubuntu 14.</description>
    </item>
    
    <item>
      <title>Cxx.jlを用いてJulia expression/value をC&#43;&#43;に埋め込む実験</title>
      <link>http://r9y9.github.io/blog/2016/01/24/passing-julia-expressions-to-cxx/</link>
      <pubDate>Sun, 24 Jan 2016 22:32:08 +0900</pubDate>
      
      <guid>http://r9y9.github.io/blog/2016/01/24/passing-julia-expressions-to-cxx/</guid>
      <description>Keno氏によるJuliaCon 2015 の発表 Keno Fischer: Shaving the Yak でタイトルの内容が一部紹介されていて、便利そうだなと思い、色々試してみました。
  
発表の内容は大まかに、Keno氏がなぜCxx.jlを作ったのか、なぜJuliaを始めたのか、といったモチベーションの話から、Cxx.jlでできることについてlive programmingを交えての紹介、といった話になっています。50分とけっこう長いですが、面白いので興味のある方はどうぞ。この記事は、上の動画を見たあと、Cxx.jlと戯れた結果をまとめたものです。
以下、この記事の目次です。
 前置き：C++をJulia上で使う 本編：JuliaのexpressionやvalueをC++に埋め込む  前置きが若干長いので、タイトルの内容が知りたい方は、飛ばして下さい。
前置き：C++をJulia上で使う Cxx.jlを使えば、C++をJulia上で非常にスムーズに扱うことができます。例えば、C++のstd::vector&amp;lt;T&amp;gt;を使いたい、さらにはJuliaのfilter関数をstd::vector&amp;lt;T&amp;gt;に対して使えるようにしたい、といった場合は、以下に示すように、ほんのすこしのコードを書くだけでできます。
準備：
using Cxx import CxxStd: StdVector filter関数：
function Base.filter{T}(f, v::StdVector{T}) r = icxx&amp;#34;std::vector&amp;lt;$T&amp;gt;();&amp;#34; for i in 0:length(v)-1 if f(T(v[i])) push!(r, v[i]) end end r end なお、filter関数に出てくる、length, getindex, push! は、Cxx..jlにそれぞれ以下のように定義されています。
Base.getindex(it::StdVector,i) = icxx&amp;#34;($(it))[$i];&amp;#34; Base.length(it::StdVector) = icxx&amp;#34;$(it).size();&amp;#34; Base.push!(v::StdVector,i) = icxx&amp;#34;$v.push_back($i);&amp;#34; 計算結果を見やすくするために、show 関数も定義しておきます。
function Base.show{T}(io::IO, v::StdVector{T}) println(io, &amp;#34;$(length(v))-element StdVector{$T}:&amp;#34;) for i = 0:length(v)-1 println(io, T(v[i])) end end 実行結果：</description>
    </item>
    
    <item>
      <title>対話環境でPoint Cloud Library (PCL) を使いたい</title>
      <link>http://r9y9.github.io/blog/2016/01/18/trying-to-use-pcl-in-dynamic-language/</link>
      <pubDate>Mon, 18 Jan 2016 00:44:46 +0900</pubDate>
      
      <guid>http://r9y9.github.io/blog/2016/01/18/trying-to-use-pcl-in-dynamic-language/</guid>
      <description>新年はじめての記事ということで、少し遅いですが、あけましておめでとうございます。PCLを対話環境で使いたかったので、お正月の間にPCLのラッパーを作りました1。なぜ作ったのか、どうやって作ったのか、少し整理して書いてみようと思います。
Point Cloud Library (PCL) とは http://www.pointclouds.org/
問題 PCL はboost、Eigenに依存している、かつtemplateを多く使用しているため、PCLを使用したプロジェクトのコンパイル時間は非常に長くなるという問題があります。twitterで [PCL コンパイル] として検索すると、例えば以下の様なツイートが見つかりますが、完全に同意です。
 PCLリンクしてるコードのコンパイルに一分半くらいかかる。つらい
&amp;mdash; がらえもん(プログラム書く (@garaemon_coder) August 14, 2015 PCLはC++だしコンパイル遅いしで色々めんどくさい
&amp;mdash; 動かないで点P (@initial_D_0601) August 25, 2015 PCLを使うプロジェクトのコンパイル時間かかりすぎて辛いわ
&amp;mdash; kato tetsuro (@tkato_) November 6, 2015 boostへの依存関係が必須かどうかについては疑問が残りますが、点群処理ではパフォーマンスが求められることが多いと思われるので、C++で書かれていることは合理的に思います。とはいえ、コンパイル時間が長いのは試行錯誤するにはつらいです。
ではどうするか 試行錯誤のサイクルを速く回せるようにすることは僕にとって非常に重要だったのと、 C++で書かなければいけないという制約もなかった（※組み込み用途ではない）ので、対話的にPCLを使うために、僕は動的型付け言語でラッパーを作ることにしました。
参考までに、対話環境を使うことによるメリットは、下記スライドが参考になります。PCLの紹介もされています2。
  コンピュータビジョンの最新ソフトウェア開発環境 SSII2015 チュートリアル hayashi  from Masaki Hayashi   何で書くか 世の中には色んなプログラミング言語があります。C++ライブラリのラッパー作るぞとなったとき、僕にとって選択肢は、
 Python Julia  の二択でした。それぞれ、以下のプロジェクトに頼れば templateを多用したライブラリのラップができそうだと思いました。
 Cython Cxx.jl  pythonに関しては、すでに cythonで書かれた strawlab/python-pcl というラッパーがあります。しかし、</description>
    </item>
    
  </channel>
</rss>