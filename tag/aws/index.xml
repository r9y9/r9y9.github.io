<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AWS | LESS IS MORE</title>
    <link>https://r9y9.github.io/tag/aws/</link>
      <atom:link href="https://r9y9.github.io/tag/aws/index.xml" rel="self" type="application/rss+xml" />
    <description>AWS</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>Copyright © Ryuichi YAMAMOTO All rights reserved.</copyright><lastBuildDate>Sun, 20 Jul 2014 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://r9y9.github.io/media/icon_hu71488a41e9448d472219f1cc71ecc0ad_259818_512x512_fill_lanczos_center_3.png</url>
      <title>AWS</title>
      <link>https://r9y9.github.io/tag/aws/</link>
    </image>
    
    <item>
      <title>Pylearn2, theanoをEC2 g2.x2large で動かす方法</title>
      <link>https://r9y9.github.io/blog/2014/07/20/pylearn2-on-ec2-g2-2xlarge/</link>
      <pubDate>Sun, 20 Jul 2014 00:00:00 +0000</pubDate>
      <guid>https://r9y9.github.io/blog/2014/07/20/pylearn2-on-ec2-g2-2xlarge/</guid>
      <description>&lt;div align=&#34;center&#34;&gt;&lt;img src=&#34;https://r9y9.github.io/images/dbm_learned_from_mnist.png &#34;Weight visualization of Restricted bolztomann machine trained on MNIST dataset.&#34;&#34; class=&#34;image&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;モチベーション&#34;&gt;モチベーション&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;手元のへぼマシンでニューラルネットの学習を回わす&lt;/li&gt;
&lt;li&gt;半日たっても終わらない&lt;/li&gt;
&lt;li&gt;最近だとGPU使って計算を高速化するのが流行りだが、手元にGPUはない&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://www.kurtsp.com/deep-learning-in-python-with-pylearn2-and-amazon-ec2.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Deep Learning in Python with Pylearn2 and Amazon EC2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;手元にGPUがない…？大丈夫！Amazon EC2を使えば良さそう！！！&lt;/p&gt;
&lt;p&gt;というわけで、めんどくさいと言わずにec2にお手軽計算環境を整えます。ec2でGPUが乗ったものだと、g2.2xlargeがよさそうですね。&lt;/p&gt;
&lt;p&gt;ちなみに↑の図、pylearn2のtutorialのRestricted Bolzmann MachinesをMNISTで学習した結果なんですが、手元のマシンだとだいたい6時間くらい？（忘れた）だったのがg2.2xlargeだと30分もかかってない（ごめんなさい時間図るの忘れた）。$0.65/hourと安いんだし（他のインスタンスに比べればそりゃ高いけど）、もう手元のマシンで計算するの時間の無駄だしやめようと思います。&lt;/p&gt;
&lt;p&gt;さてさて、今回環境構築に少しはまったので、もうはまらないように簡単にまとめておきます。&lt;/p&gt;
&lt;h2 id=&#34;結論&#34;&gt;結論&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/marketplace/pp/B00FYCDDTE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Amazon Linux AMI with NVIDIA GRID GPU Driver on AWS Marketplace &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;すでにNVIDIAのドライバとCUDA（5.5）が入ったインスタンスをベースに使いましょう。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://xanxys.hatenablog.jp/entry/2014/05/17/135932&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;EC2(g2.2xlarge)でOpenGLを使う方法&lt;/a&gt; で挙げられているように普通のlinuxを使う方法もありますが、ハマる可能性大です。僕はubuntuが使いたかったので最初はubuntu 14.04 server でドライバ、cuda (5.5 or 6.0) のインストールを試しましたが同じように失敗しました。&lt;/p&gt;
&lt;p&gt;イケイケと噂の音声認識ライブラリKaldiの&lt;a href=&#34;https://220-135-252-130.hinet-ip.hinet.net/speechwiki/index.php/Kaldi#installing_and_testing_CUDA-6.0_in_Ubuntu_14.04&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ドキュメントらしきもの&lt;/a&gt;を見ると、Ubuntu 14.04でもcuda 6.0インストールできるっぽいんですけどね…だめでした。頑張ればできるかもしれませんが、よほど強いメリットがない場合は、おとなしくpre-installされたインスタンスを使うのが吉だと思います。&lt;/p&gt;
&lt;h2 id=&#34;セットアップ&#34;&gt;セットアップ&lt;/h2&gt;
&lt;p&gt;↑で上げたインスタンスにはGPUドライバやCUDAは入っていますが、theanoもpylearn2もnumpyもscipyも入っていません。よって、それらは手動でインストールする必要があります。&lt;/p&gt;
&lt;p&gt;というわけで、インストールするシェルをメモって置きます。試行錯誤したあとに適当にまとめたshellなので、なんか抜けてたらごめんなさい。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gist.github.com/r9y9/50f13ba28b5b158c25ae&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://gist.github.com/r9y9/50f13ba28b5b158c25ae&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

# Pylearn2 setup script for Amazon Linux AMI with NVIDIA GRID GPU Driver.
# http://goo.gl/3KeXXW

sudo yum update -y
sudo yum install -y emacs tmux python-pip
sudo yum install -y python-devel git blas-devel lapack-devel

# numpy, scipy, matplotlib, etc.
sudo pip install numpy
sudo pip install scipy
sudo pip install cython
sudo pip install ipython nose

# matplotlib
sudo yum install -y libpng-devel freetype-devel
sudo pip install matplotlib

# Scikit-learn
sudo pip install scikit-learn

# Theano
sudo pip install --upgrade git+git://github.com/Theano/Theano.git

# Enable GPU for theano
echo &#39;[global]
floatX = float32
device = gpu0

[nvcc]
fastmath = True&#39; &amp;gt; .theanorc

# pylearn2
git clone git://github.com/lisa-lab/pylearn2.git
cd pylearn2
sudo python setup.py develop
cd ..

echo &amp;quot;export PYLEARN2_DATA_PATH=/home/ec2-user/data&amp;quot; &amp;gt;&amp;gt; .bashrc

# MNIST dataset
mkdir -p data/mnist/
cd data/mnist/
wget http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz
gunzip train-images-idx3-ubyte.gz
wget http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz
gunzip train-labels-idx1-ubyte.gz
wget http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz
gunzip t10k-images-idx3-ubyte.gz
wget http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz
gunzip t10k-labels-idx1-ubyte.gz
cd ../..
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;簡単ですね&lt;/p&gt;
&lt;p&gt;また、上記のような手順を踏まなくても、Community AMIs でpylearn2で検索するとすでにpylearn2が入ったAMIが出てくるので、それを使うのもありかもです（僕は試してません）。&lt;/p&gt;
&lt;p&gt;僕がAMIを公開してもいいんですが、今のところする予定はありません&lt;/p&gt;
&lt;h1 id=&#34;まとめ&#34;&gt;まとめ&lt;/h1&gt;
&lt;p&gt;そこそこ良い計算環境がさくっとできました、まる。ラーメン食べたい&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://aws.amazon.com/jp/ec2/instance-types/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;インスタンスタイプ - Amazon EC2 (クラウド上の仮想サーバー Amazon Elastic Compute Cloud) | アマゾン ウェブ サービス（AWS 日本語）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kurtsp.com/deep-learning-in-python-with-pylearn2-and-amazon-ec2.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Deep Learning in Python with Pylearn2 and Amazon EC2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xanxys.hatenablog.jp/entry/2014/05/17/135932&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;EC2(g2.2xlarge)でOpenGLを使う方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
