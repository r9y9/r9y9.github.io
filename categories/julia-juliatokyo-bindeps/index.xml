<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Julia JuliaTokyo BinDeps on LESS IS MORE</title>
    <link>http://r9y9.github.io/categories/julia-juliatokyo-bindeps/</link>
    <description>Recent content in Julia JuliaTokyo BinDeps on LESS IS MORE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Tue, 30 Sep 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://r9y9.github.io/categories/julia-juliatokyo-bindeps/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JuliaTokyo #2でBinDeps.jl についてLTしてきた</title>
      <link>http://r9y9.github.io/blog/2014/09/30/juliatokyo2/</link>
      <pubDate>Tue, 30 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://r9y9.github.io/blog/2014/09/30/juliatokyo2/</guid>
      <description>JuliaTokyo #2 - connpass
 発表概要 C/C++ライブラリのラッパー（C++は現状のJuliaでは難しいけど）を作るときに、どうやってライブラリの依存関係を管理するか？という話です。結論としては、方法はいくつかありますが　BinDeps.jl というパッケージを使うのが楽で良いですよ、ということです。Githubのいろんなリポジトリをあさった僕の経験上、BinDeps.jl はバイナリの依存関係管理におけるデファクトスタンダードな気がしています。BinDeps.jl の使い方は、既存のパッケージのコードを読みまくって学ぶのがおすすめです。
さて、途中で書くのに疲れてしまったのですが、自作のJuliaパッケージで、Cライブラリとの依存性を記述する - Qiita に以前似たような内容をまとめたので、併せてどうぞ。qiitaにも書きましたが、最適化関係のプロジェクトを集めた JuliaOpt コミュニティでは、バイナリの依存関係管理にBinDeps.jlを使用することを推奨しています。
雑感  勉強会にはデータ分析界隈の人が多い印象。音声系の人はとても少なかった。 R人気だった Go使ってる！って人と合わなかった（つらい） @show マクロ最高 unicode最高 懇親会では、なぜか途中から深層学習やベイズの話をしていた… いい忘れたけど僕もnightly build勢でした。毎日あたたかみのある手動pull &amp;amp; make をしています。 Julia の話ができて楽しかったので、また参加したいなー  LTで MeCab.jl について話をしてくれたchezouさんが、ちょうどBinDeps.jl に興味を持たれているようだったので、勉強会のあとに BinDeps.jl を使ってバイナリの管理を実装して、プルリクをしてみました。参考になればうれしいなーと思います。
おしまい。</description>
    </item>
    
  </channel>
</rss>