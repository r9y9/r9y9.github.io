<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>machine-learning matrix-factorization on LESS IS MORE</title>
    <link>http://r9y9.github.io/categories/machine-learning-matrix-factorization/</link>
    <description>Recent content in machine-learning matrix-factorization on LESS IS MORE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 19 Oct 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://r9y9.github.io/categories/machine-learning-matrix-factorization/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>NMFで音源分離を試してみる</title>
      <link>http://r9y9.github.io/blog/2014/10/19/nmf-music-source-separation/</link>
      <pubDate>Sun, 19 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://r9y9.github.io/blog/2014/10/19/nmf-music-source-separation/</guid>
      <description>ずーーっと前に、 NMFアルゴリズムの導出（ユークリッド距離版） - LESS IS MORE で実際に実装してみてやってみると書いていたのに、まったくやっていなかったことに気づいたのでやりました。
音楽に対してやってみたのですが、簡単な曲だったら、まぁぼちぼち期待通りに動いたかなぁという印象です。コードとノートを挙げたので、興味のある方はどうぞ。
Github https://github.com/r9y9/julia-nmf-ss-toy
ノート NMF-based Music Source Separation Demo.ipynb | nbviewer
NMFのコード (Julia) NMFの実装の部分だけ抜き出しておきます。
function nmf_euc(Y::AbstractMatrix, K::Int=4; maxiter::Int=100) H = rand(size(Y, 1), K) U = rand(K, size(Y, 2)) const ϵ = 1.0e-21 for i=1:maxiter H = H .* (Y*U&amp;#39;) ./ (H*U*U&amp;#39; + ϵ) U = U .* (H&amp;#39;*Y) ./ (H&amp;#39;*H*U + ϵ) U = U ./ maximum(U) end return H, U end いやー簡単ですねー。NMFアルゴリズムの導出（ユークリッド距離版） - LESS IS MORE で導出した更新式ほぼそのままになってます（異なる点としては、ゼロ除算回避をしているのと、Uをイテレーション毎に正規化していることくらい）。</description>
    </item>
    
    <item>
      <title>NMFアルゴリズムの導出（ユークリッド距離版）</title>
      <link>http://r9y9.github.io/blog/2013/07/27/nmf-euclid/</link>
      <pubDate>Sat, 27 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://r9y9.github.io/blog/2013/07/27/nmf-euclid/</guid>
      <description>はじめに シングルトラックにミックスダウンされた音楽から、その構成する要素（例えば、楽器とか）を分離したいと思うことがある。 音源分離と言えば、最近はNon-negative Matrix Factorization (非負値行列因子分解; NMF) が有名。 実装は非常に簡単だけど、実際にやってみるとどの程度の音源分離性能が出るのか気になったので、やってみる。
と思ったけど、まずNMFについて整理してたら長くなったので、実装は今度にして、まずアルゴリズムを導出してみる。
2014/10/19 追記 実装しました
https://github.com/r9y9/julia-nmf-ss-toy
NMFの問題設定 NMFとは、与えられた行列を非負という制約の元で因子分解する方法のこと。 音楽の場合、対象はスペクトログラムで、式で書くとわかりやすい。 スペクトログラムを $\mathbf{Y}: [\Omega \times T] $ とすると、
 \begin{align} \mathbf{Y} \simeq \mathbf{H} \mathbf{U} \end{align}  となる、$\mathbf{H}: [\Omega \times K]、\mathbf{U}: [K \times T]$ を求めるのがNMFの問題。 ここで、Hが基底、Uがアクティビティ行列に相当する。 NMFは、元の行列Yと分解後の行列の距離の最小化問題として定式化できる。
 \begin{align} \mathbf{H}, \mathbf{U} = \mathop{\rm arg~min}\limits_{\mathbf{H}, \mathbf{U}} D (\mathbf{Y}|\mathbf{H}\mathbf{U}), \hspace{3mm} {\rm subect\ to} \hspace{3mm} H_{\omega,k}, U_{k, t}  0 \end{align}  すごくシンプル。Dは距離関数で色んなものがある。ユークリッド距離、KLダイバージェンス、板倉斎藤距離、βダイバージェンスとか。
ユークリッド距離の最小化 ここではユークリッド距離（Frobeniusノルムともいう）として、二乗誤差最小化問題を解くことにする。 一番簡単なので。最小化すべき目的関数は次のようになる。
 \begin{align} D (\mathbf{Y}|\mathbf{H}\mathbf{U}) =&amp; || \mathbf{Y}-\mathbf{HU}||_{F} \\ =&amp; \sum_{\omega, k}|Y_{\omega,t} - \sum_{k}H_{\omega, k}U_{k, t}|^{2} \end{align}  行列同士の二乗誤差の最小化は、要素毎の二乗誤差の和の最小化ということですね。展開すると、次のようになる。</description>
    </item>
    
  </channel>
</rss>