<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go, Music-signal-processing on LESS IS MORE</title>
    <link>http://r9y9.github.io/categories/go-music-signal-processing/</link>
    <description>Recent content in Go, Music-signal-processing on LESS IS MORE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Tue, 28 Jan 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://r9y9.github.io/categories/go-music-signal-processing/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Goでクロマベクトルを求める</title>
      <link>http://r9y9.github.io/blog/2014/01/28/go-chroma-vector/</link>
      <pubDate>Tue, 28 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://r9y9.github.io/blog/2014/01/28/go-chroma-vector/</guid>
      <description>Chromagram。ドレミの歌の冒頭を分析した結果です
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;github.com/mjibson/go-dsp/wav&amp;#34; &amp;#34;github.com/r9y9/go-msptools/pcp&amp;#34; &amp;#34;log&amp;#34; &amp;#34;os&amp;#34; ) func main() { // reading data 	file, err := os.Open(&amp;#34;/path/to/file.wav&amp;#34;) if err != nil { log.Fatal(err) } defer file.Close() wav, werr := wav.ReadWav(file) if werr != nil { log.Fatal(werr) } // convert to []float64 from []int 	data := make([]float64, len(wav.Data[0])) for i := range data { data[i] = float64(wav.Data[0][i]) } // settings for analysis 	frameShift := int(float64(wav.</description>
    </item>
    
  </channel>
</rss>