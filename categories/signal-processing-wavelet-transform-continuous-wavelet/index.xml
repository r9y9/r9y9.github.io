<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>signal-processing wavelet-transform continuous-wavelet on LESS IS MORE</title>
    <link>http://r9y9.github.io/categories/signal-processing-wavelet-transform-continuous-wavelet/</link>
    <description>Recent content in signal-processing wavelet-transform continuous-wavelet on LESS IS MORE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 01 Jun 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://r9y9.github.io/categories/signal-processing-wavelet-transform-continuous-wavelet/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>連続ウェーブレット変換に使うマザーウェーブレット色々: Morlet, Paul, DOG</title>
      <link>http://r9y9.github.io/blog/2014/06/01/continuouos-wavelet-transform-types/</link>
      <pubDate>Sun, 01 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://r9y9.github.io/blog/2014/06/01/continuouos-wavelet-transform-types/</guid>
      <description>「ウェーブレット変換って難しいんじゃ…マザーウェーブレット？よくわかんない…」
大丈夫、そんな人には以下の文献がお勧めです
Torrence, C. and G.P. Compo &amp;ldquo;A Practical Guide to Wavelet Analysis&amp;rdquo;, Bull. Am. Meteorol. Soc., 79, 61–78, 1998.
前置きはさておき、上の文献を参考にMorlet, Paul, DOG (Derivative of Gaussian) の代表的な3つのマザーウェーブレットで音声に対してウェーブレット変換をしてみたので、メモがてら結果を貼っておく
図の横軸はサンプルで、縦軸は周波数Hz（対数目盛り）にした
マザーウェーブレットのパラメータは、Morletは $\omega_{0} = 6.0$、Paulは $M = 4$、DOGは $M = 6$
スケールは、min=55hzで、25cent毎に8オクターブ分取った※厳密には違うのでごめんなさい
分析に使った音声は、逆連続ウェーブレット変換による信号の再構成 - LESS IS MORE で使ったのと同じ
Morlet  Paul  DOG  対数を取ると、以下のような感じ
Morlet  Paul  DOG  Paulは時間解像度は高いけど周波数解像度はいまいちなので、音声とかには向かないのかなー。DOGはMorletとPaulの中間くらいの位置づけの様子。DOGはorderを上げればMorletっぽくなるけど、Morletの方がやっぱ使いやすいなーという印象。
スケールから周波数への変換 実は今日まで知らなかったんだけど、マザーウェーブレットによっては時間領域でのスケールの逆数は必ずしも周波数領域での周波数に対応するとは限らないそう。というかずれる（詳細はPractical Guideの3.hを参照）。上で書いた厳密には違うというのは、これが理由。
ただし、スケールから周波数への変換はマザーウェーブレットから一意に決まるようなので、正しい周波数を求めることは可能。上に貼った図は、Practical Guideにしたがってスケールから周波数に変換している。
例えば、$f = \frac{1}{s}$となるようにスケールを与えていたとき、$\omega_0 = 6.0$のMorletを使ったウェーブレット変換の真の周波数は、</description>
    </item>
    
    <item>
      <title>FFTを使った連続ウェーブレット変換の高速化</title>
      <link>http://r9y9.github.io/blog/2013/10/20/continuous-wavelet-tranform/</link>
      <pubDate>Sun, 20 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://r9y9.github.io/blog/2013/10/20/continuous-wavelet-tranform/</guid>
      <description>そもそもウェーブレット変換って何 Jump to wikipedia
いわゆる時間周波数解析の手法の一つで、音声、音楽、画像の解析に使われる。直感的には、STFTでいう窓関数の幅を周波数に応じて拡大・伸縮させて、時間変化する信号の特徴を上手く捉えようとする手法のこと
高速化の仕組み さて、本題。ウェーブレット変換は、(スケールパラメータを固定すれば)入力信号とマザーウェーブレットのたたみ込みで表されるので、たたみ込み定理よりフーリエ変換を使った計算方法が存在する。
つまり、
 入力信号とマザーウェーブレットをそれぞれフーリエ変換する 掛け算する 逆フーリエ変換する  というプロセスでウェーブレット変換を求めることができて、かつフーリエ変換にはFFTという高速なアルゴリズムが存在するので、計算を高速化できるという仕組み。まぁ原理としてはシンプルなんだけど以外と面倒くさい（気のせい？）。
色々調べたので、メモ代わりにまとめておく。解説ではなくリンク集です
A Practical Guide to Wavelet Analysis [web] [PDF] 結論から言えばここが一番わかりやすかった。
 実装よりで理論の解説がある matlab/fortran のコードがある  がいいところ
基本的にはこれ読めばわかる。数学全然わからん俺でも読めた。特に、離散表現でのウェーブレットについても書かれているのは良い。連続ウェーブレットといっても、デジタル信号処理で扱う上では離散化しないといけないわけなので
さて、僕が参考にしたmatlabコードへの直リンクは以下
 マザーウェーブレットの周波数応答の計算部分 連続ウェーブレット変換の本体 連続ウェーブレット変換のテストコード  その他、fortanコードなどいくつかあるので、それらはウェブサイトからどうぞ
Matlab mathworksさんのwavelet toolboxのドキュメントもよかった。ここから上記のpracticalなんちゃらのリンクもある
 Continuous Wavelet Transform Continuous wavelet transform using FFT algorithm Inverse CWT  コードは転がってないですね。まぁ有料なので
日本語でわかりやすいもの  C/C++言語でガボールウェーブレット変換により時間周波数解析を行うサンプルプログラム  ここは本当に素晴らしい。何年か前にも参考にさせて頂きました。  連続ウェーブレット変換 (CWT) - FlexPro 7 日本語版サポート情報  日本語で丁寧に書かれてる。内容自体は、practicalなんちゃらと似ている  東北大学 伊藤先生の講義資料  数少ない日本語でのウェーブレットに関する資料。ただし連続ウェーブレットについてはあんまり解説はない。C言語のサンプル付き   書籍 今回は調べてない。数年前にちょいちょい調べたことがあるけど忘れた</description>
    </item>
    
  </channel>
</rss>