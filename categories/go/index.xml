<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on LESS IS MORE</title>
    <link>http://r9y9.github.io/categories/go/</link>
    <description>Recent content in Go on LESS IS MORE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Tue, 29 Jul 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://r9y9.github.io/categories/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Goに関する良記事</title>
      <link>http://r9y9.github.io/blog/2014/02/02/ready-to-use-go/</link>
      <pubDate>Sun, 02 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://r9y9.github.io/blog/2014/02/02/ready-to-use-go/</guid>
      <description>いくつか見つけたのでメモる
Why We Think GoLang Is Ready For Early Stage Startups とあるスタートアップがウェブでGoを使うという意思決定をした理由、その決断に至るまでのプロセスが書かれている。また、その過程でGoを使うことによる利点・欠点が簡潔にまとめられてる。参考になった
Go Getter - Performance comparison to C++ business card ray tracer  GoとC++のパフォーマンスの比較。Ray tracingというCGの手法を用いて比較をしていて、Goでも最適化するとC++並のスピード出ますよ（そしてC++と違ってGCあるしマルチコアにも簡単にできるしGoいいよ）って話。（自分へのメモのため画像を拝借していますが、意味がわからないと思うので元記事を参照してください）
ただoptimized Go vs un-optimized C++なので注意。Goの最適化が主旨の記事です
Go Getter Part 2 - Now with C++ optimizations  さっきの続きで、こちらでは最適化したC++と比較されてる。OpenMP使って並列化してるようだけど、あれ、まだC++の方が遅い・・（正直意外
Go Getter Part 3 - Further optimizations and a multi-threaded C++ version  これで最後。C++（とGo）をめちゃくちゃ最適化した、って奴ですね。C++の方が二倍程度速くなったよう。 ただ、やっぱC++の方が良かった、というよりGoがC++並になるのも時間の問題って感じですね。
さて このまとめで何が言いたかったというと
「Goを使わない選択肢がない」
まぁ半分冗談（ケースバイケースだし）ですが、僕のようにC++をメインで使っているけど不満ありまくりな人は、一度Go使ってみてもいいんじゃないでしょうか、と思います。C++の百倍書きやすいです</description>
    </item>
    
    <item>
      <title>Goで信号処理</title>
      <link>http://r9y9.github.io/blog/2014/01/27/start-coding-go-msptools/</link>
      <pubDate>Mon, 27 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://r9y9.github.io/blog/2014/01/27/start-coding-go-msptools/</guid>
      <description> 最近Go言語を触っていて、これがなかなかいい感じ。そこそこ速いので、信号処理や機械学習も行けると思う
Goの良い所  デフォでたくさん便利なパッケージがある。http, json, os, &amp;hellip; パッケージのインストールはとても簡単。go getするだけ デフォでテストの枠組みがある gofmtでコードのformattingしてくれるので書き方で迷わなくて良い 使わないパッケージをimportするとコンパイルエラーになるし自然と疎結合なコードを書くようになる 並列処理を言語レベルでサポート GCあるのでメモリ管理なんてしなくていい 全般的にC++より書きやすい（ここ重要） そこそこ速い（C++よりは遅いけど）  ホントはPythonでさくっと書きたいけどパフォーマンスもほしいからC++で書くかー（嫌だけど）。と思ってた自分にはちょうどいい
Goの悪い所（主にC++と比べて）  ちょっと遅い。さっと試したウェーブレット変換は、1.5倍くらい遅かった気がする（うろ覚え） C++やpythonに比べるとライブラリは少ない 言語仕様とかそのへんが優れてるかどうかは判断つきませんごめんなさい  Go-msptools 2014/07/22 追記：
Go-msptoolsはGOSSPに吸収されました。（GOSSP - Go言語で音声信号処理 - LESS IS MOREを参照）
おまけ：音の信号処理に役立ちそうなライブラリ  go-dsp portaudio-go  </description>
    </item>
    
  </channel>
</rss>