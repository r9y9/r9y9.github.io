<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>speech-signal-processing go on LESS IS MORE</title>
    <link>http://r9y9.github.io/categories/speech-signal-processing-go/</link>
    <description>Recent content in speech-signal-processing go on LESS IS MORE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 08 Jun 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://r9y9.github.io/categories/speech-signal-processing-go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GOSSP - Go言語で音声信号処理</title>
      <link>http://r9y9.github.io/blog/2014/06/08/gossp-speech-signal-processing-for-go/</link>
      <pubDate>Sun, 08 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://r9y9.github.io/blog/2014/06/08/gossp-speech-signal-processing-for-go/</guid>
      <description>C++からGoへ みなさん、C++で信号処理のアルゴリズムを書くのはつらいと思ったことはありませんか？C++で書くと速いのはいいけれど、いかんせん書くのが大変、コンパイルエラーは読みづらい、はたまたライブラリをビルドしようとしたら依存関係が上手く解決できず……そんな覚えはないでしょうか？謎のコンパイルエラーに悩みたくない、ガーベジコレクションほしい、Pythonのようにさくっと書きたい、型推論もほしい、でも動作は速い方がいい、そう思ったことはないでしょうか。
そこでGoです。もちろん、そういった思いに完全に答えてくれるわけではありませんが、厳しいパフォーマンスを要求される場合でなければ、Goの方が良い場合も多いと僕は思っています。 とはいえ、まだ比較的新しい言語のため、ライブラリは少なく信号処理を始めるのも大変です。というわけで、僕がC++をやめてGoに移行したことを思い出し、Goでの信号処理の基礎と、今まで整備してきたGoでの音声信号処理ライブラリを紹介します。
Goの良いところ/悪いところについては書きません。正直、本当は何の言語でもいいと思っていますが、僕はGoが好きなので、ちょっとでもGoで信号処理したいと思う人が増えるといいなーと思って書いてみます。
あとで書きますが、僕が書いたコードで使えそうなものは、以下にまとめました。
https://github.com/r9y9/gossp
基礎 Wavファイルの読み込み/書き込み [wav]  まずは音声ファイルの読み込みですね。wavファイルの読み込みさえできれば十分でしょう。
これは、すでに有用なライブラリが存在します。GO-DSP とういデジタル信号処理のライブラリに含まれるwavパッケージを使いましょう。
次のように書くことができます。
package main import ( &amp;quot;fmt&amp;quot; &amp;quot;github.com/mjibson/go-dsp/wav&amp;quot; &amp;quot;log&amp;quot; &amp;quot;os&amp;quot; ) func main() { // ファイルのオープン file, err := os.Open(&amp;quot;./test.wav&amp;quot;) if err != nil { log.Fatal(err) } // Wavファイルの読み込み w, werr := wav.ReadWav(file) if werr != nil { log.Fatal(werr) } // データを表示 for i, val := range w.Data { fmt.Println(i, val) } }  簡単ですね。
Goはウェブ周りの標準パッケージが充実しているので、以前qiitaに書いた記事のように、wavファイルを受け取って何らかの処理をする、みたいなサーバも簡単に書くことができます</description>
    </item>
    
    <item>
      <title>音声分析変換合成システムWORLDのGoラッパーを書いた</title>
      <link>http://r9y9.github.io/blog/2014/03/22/go-world/</link>
      <pubDate>Sat, 22 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://r9y9.github.io/blog/2014/03/22/go-world/</guid>
      <description>音声分析変換合成システムWORLD WORLDとは、山梨大学の森勢先生が作られている高品質な音声分析変換合成システムです。非常に高品質かつ高速に動作するのが良い所です。詳細は以下のURLへ
http://ml.cs.yamanashi.ac.jp/world/
オリジナルはC+＋で書かれていますが、Goからも使えるようにラッパーを書きました。非常にいいソフトウェアなので、もしよろしければどうぞ
GO-WORLD https://github.com/r9y9/go-world
使い方について、ほんの少し解説を書きます
※ubuntu12.04でのみ動作確認してます。
準備 1. WORLDのインストール まずWORLDをインストールする必要があります。公式のパッケージではinstallerに相当するものがなかったので、作りました
https://github.com/r9y9/world
./waf configure &amp;amp;&amp;amp; ./waf sudo ./waf install  でインストールできます。
なお、WORLDは最新版ではなく0.1.2としています。最新版にすると自分の環境でビルドコケてしまったので…
2. GO-WORLDのインストール go get github.com/r9y9/go-world  簡単ですね！
使い方 1. インポートする import &amp;quot;github.com/r9y9/go-world&amp;quot;  2. worldのインスタンスを作る w := world.New(sampleRate, framePeriod) // e.g. (44100, 5)  3. 好きなworldのメソッドを呼ぶ 基本周波数の推定: Dio timeAxis, f0 := w.Dio(input, w.NewDioOption()) // default option is used  スペクトル包絡の推定: Star spectrogram := w.Star(input, timeAxis, f0)  励起信号の推定: Platinum residual := w.</description>
    </item>
    
  </channel>
</rss>